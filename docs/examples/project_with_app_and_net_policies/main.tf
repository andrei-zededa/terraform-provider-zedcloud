terraform {
  required_providers {
    # A locally built version of the Zedcloud TF provider needs to be copied as
    # the $HOME/.terraform.d/plugins/localhost/zededa/zedcloud/$VERSION/linux_amd64/terraform-provider-zedcloud
    # file (make user it's executable).
    zedcloud = {
      source  = "localhost/zededa/zedcloud"
      version = "2.2.7-fix.app.policy.15th"
    }
  }
}

variable "ZEDEDA_CLOUD_URL" {
  description = "ZEDEDA CLOUD URL"
  sensitive   = false
  type        = string
}

variable "ZEDEDA_CLOUD_TOKEN" {
  description = "ZEDEDA CLOUD API TOKEN"
  sensitive   = true
  type        = string
}

provider "zedcloud" {
  zedcloud_url   = var.ZEDEDA_CLOUD_URL
  zedcloud_token = var.ZEDEDA_CLOUD_TOKEN
}

# This already exists, we can either use a data block or import it. 
# terraform import zedcloud_datastore.Dockerhub 8d2d605d-7d3e-4c45-aadb-572ffbc5a9de
resource "zedcloud_datastore" "Dockerhub" {
  name        = "Dockerhub"
  title       = "Public Docker Container Image Datastore"
  description = "Datastore for public Docker container images"

  ds_type = "DATASTORE_TYPE_CONTAINERREGISTRY"
  ds_fqdn = "docker://docker.io"
}

# This already exists, we can either use a data block or import it. 
# terraform import zedcloud_datastore.Local-HTTP-Server-8080 fc3e56da-47eb-41cc-ab0c-9dd2addbe23d
resource "zedcloud_datastore" "Local-HTTP-Server-8080" {
  name  = "Local-HTTP-Server-8080"
  title = "Local-HTTP-Server-8080"

  ds_type = "DATASTORE_TYPE_HTTP"
  ds_fqdn = "http://192.168.192.168:8080"
  ds_path = "images_datastore"
}

# Needed to retrieve the ID which is generated by Zedcloud.
data "zedcloud_datastore" "Local-HTTP-Server-8080" {
  name  = zedcloud_datastore.Local-HTTP-Server-8080.name
  title = zedcloud_datastore.Local-HTTP-Server-8080.title

  ds_type = zedcloud_datastore.Local-HTTP-Server-8080.ds_type
  ds_fqdn = zedcloud_datastore.Local-HTTP-Server-8080.ds_fqdn
}

# This already exists, we can either use a data block or import it. 
# terraform import zedcloud_image.ubuntu_24_04_with_modbus_disk_999MB 9c02df13-73b6-4abb-b543-246bcb161420
resource "zedcloud_image" "ubuntu_24_04_with_modbus_disk_999MB" {
  name  = "ubuntu_24_04_with_modbus_disk_999MB"
  title = "ubuntu_24_04_with_modbus_disk_999MB"

  depends_on = [
    zedcloud_datastore.Local-HTTP-Server-8080
  ]

  datastore_id = data.zedcloud_datastore.Local-HTTP-Server-8080.id

  image_rel_url    = "ubuntu_24_04_with_modbus_disk_999MB.qcow2"
  image_format     = "QCOW2"
  image_arch       = "AMD64"
  image_sha256     = "CA1CD93D8863B08BA089559A11AE1F4C2B518B69B572FC629479F9052A747E19"
  image_size_bytes = 1018757120
  image_type       = "IMAGE_TYPE_APPLICATION"
}

# This already exists, we can either use a data block or import it. 
# terraform import zedcloud_application.ubuntu_2nic 91a0b384-266a-4431-9093-63d19d83fb2f
resource "zedcloud_application" "ubuntu_2nic" {
  name  = "ubuntu_2nic"
  title = "ubuntu_2nic"

  depends_on = [
    zedcloud_image.ubuntu_24_04_with_modbus_disk_999MB
  ]

  # NOTE: Needed otherwise TF will always detect a diff since it doesn't know
  # what's inside the manifest.json .
  storage = 10485760
  # TODO: The app manifest has the image ID hard-coded. If we migrate the app
  # manifest.json to TF HCL then the image ID can be retrieved from a data
  # variable.
  manifest_file = "edge_apps/ubuntu_2nic/manifest.json"
}

# Needed to retrieve the ID which is generated by Zedcloud.
data "zedcloud_application" "ubuntu_2nic" {
  name  = zedcloud_application.ubuntu_2nic.name
  title = zedcloud_application.ubuntu_2nic.title
}

resource "zedcloud_project" "PROJ_AABB1234_FROM_TF" {
  name  = "PROJ_AABB1234_FROM_TF"
  title = "Project AABB1234 created via terraform"

  depends_on = [
    zedcloud_application.ubuntu_2nic
  ]

  type = "TAG_TYPE_PROJECT"
  tag_level_settings {
    flow_log_transmission = "NETWORK_INSTANCE_FLOW_LOG_TRANSMISSION_UNSPECIFIED"
  }

  app_policy {
    # The name MUST be in the "$PROJECT_NAME.apppolicy" format.
    name  = "PROJ_AABB1234_FROM_TF.apppolicy"
    title = ""
    type  = "POLICY_TYPE_APP"

    app_policy {
      apps {
        name              = zedcloud_application.ubuntu_2nic.name
        title             = ""
        app_id            = data.zedcloud_application.ubuntu_2nic.id
        naming_scheme     = "APP_NAMING_SCHEME_PROJECT_APP_DEVICE"
        name_project_part = "PROJ_AABB1234_FROM_TF"
        name_app_part     = zedcloud_application.ubuntu_2nic.name

        origin_type = "ORIGIN_UNSPECIFIED"

        cpus     = 0
        memory   = 0
        networks = 0

        # TODO: This is marked as mandatory in the TF provider but actually
        # causes an error. Currently hard-coded to nil/null to get things
        # working but causes to always see a diff vs. the actual Zedcloud state.
        manifest_json {
          ac_kind    = ""
          ac_version = ""
          name       = ""
        }

        interfaces {
          intfname    = "1st_conn_port_fwd"
          intforder   = 1
          privateip   = false
          netinstname = ""
          netinsttag = {
            ni_local_nat = "true"
          }
        }

        interfaces {
          intfname    = "2nd_conn"
          intforder   = 2
          privateip   = false
          netinstname = ""
          netinsttag = {
            ni_local_switch = "true"
          }
        }

        start_delay_in_seconds = 45
      }
    }
  }

  network_policy {
    # The name MUST be in the "$PROJECT_NAME.networkPolicy" format. Very consistent with the app policy naming !
    name  = "PROJ_AABB1234_FROM.networkPolicy"
    title = ""
    type  = "POLICY_TYPE_NETWORK"

    network_policy {
      net_instance_config {
        name      = "ni_local_nat"
        title     = "ni_local_nat"
        kind      = "NETWORK_INSTANCE_KIND_LOCAL"
        type      = "NETWORK_INSTANCE_DHCP_TYPE_V4"
        device_id = "" # NOTE: Field is marked as mandatory in the TF provider.

        port           = "uplink"
        device_default = true

        tags = {
          ni_local_nat = "true"
        }
      }

      net_instance_config {
        name      = "ni_local_switch"
        title     = "ni_local_switch"
        kind      = "NETWORK_INSTANCE_KIND_SWITCH"
        type      = "NETWORK_INSTANCE_DHCP_TYPE_UNSPECIFIED"
        device_id = "" # NOTE: Field is marked as mandatory in the TF provider.

        port           = "0"
        device_default = false

        tags = {
          ni_local_switch = "true"
        }
      }
    }
  }
}

#data "zedcloud_project" "PROJ_AABB1234_FROM_TF" {
#  name  = "PROJ_AABB1234_FROM_TF"
#  title = "Project AABB1234 created via terraform"
#  type  = "TAG_TYPE_PROJECT"
#}

# Models and brands not (yet) be managed by TF.
data "zedcloud_brand" "ZedVirtualDevice" {
  name        = "ZedVirtualDevice"
  title       = "ZedVirtualDevice"
  origin_type = "ORIGIN_IMPORTED"
}

data "zedcloud_model" "ZedVirtualDevice-Many-Ports" {
  name        = "ZedVirtualDevice-Many-Ports"
  title       = "ZedVirtualDevice-Many-Ports"
  brand_id    = data.zedcloud_brand.ZedVirtualDevice.id
  type        = "AMD64"
  state       = "SYS_MODEL_STATE_ACTIVE"
  origin_type = "ORIGIN_LOCAL"
  attr        = {}
}

# NOTE: the difference between the resource and the name field.
resource "zedcloud_network" "edge_node_as_dhcp_client" {
  name  = "edge_node_as_dhcp_client_PROJ_AABB1234"
  title = "edge_node_as_dhcp_client_PROJ_AABB1234"
  kind  = "NETWORK_KIND_V4"

  depends_on = [
    zedcloud_project.PROJ_AABB1234_FROM_TF
  ]

  project_id = zedcloud_project.PROJ_AABB1234_FROM_TF.id

  ip {
    dhcp = "NETWORK_DHCP_TYPE_CLIENT"
  }
  mtu = 1500
}

resource "zedcloud_edgenode" "EDGE_NODE_AAAABBBB0001_FROM_TF" {
  name           = "EDGE_NODE_AAAABBBB0001_FROM_TF"
  title          = "EDGE_NODE_AAAABBBB0001_FROM_TF"
  serialno       = "AAAABBBB0001"
  onboarding_key = "5d0767ee-0547-4569-b530-387e526f8cb9"
  model_id       = data.zedcloud_model.ZedVirtualDevice-Many-Ports.id
  project_id     = zedcloud_project.PROJ_AABB1234_FROM_TF.id
  # utype          = "AMD64"
  # The TF provider SHOULD know how to do 2 API requests if needed to set a
  # newly created edge node to ADMIN_STATE_ACTIVE.
  admin_state = "ADMIN_STATE_ACTIVE"

  interfaces {
    intfname = "eth0"
    # AdapterUsage Adapter Usage
    #
    # - ADAPTER_USAGE_UNSPECIFIED: Adapter unspecified
    #   - ADAPTER_USAGE_MANAGEMENT: Adapter can be used by EVE as well as other Edge applications
    #   - ADAPTER_USAGE_APP_DIRECT: Adapter is directly used by one edge application
    #   - ADAPTER_USAGE_APP_SHARED: Adapter can be shared by different network instances
    #   - ADAPTER_USAGE_DISABLED: Adapter disabled, for future use
    intf_usage = "ADAPTER_USAGE_MANAGEMENT"
    cost       = 0
    netname    = zedcloud_network.edge_node_as_dhcp_client.name
    tags = {
      # Any string key/value pair should work here.
      net_intf_first = "true"
    }
  }

  interfaces {
    intfname   = "eth1"
    intf_usage = "ADAPTER_USAGE_APP_SHARED"
    cost       = 0
    netname    = zedcloud_network.edge_node_as_dhcp_client.name
    tags = {
      net_intf_second = "true"
    }
  }

  tags = {}
}
